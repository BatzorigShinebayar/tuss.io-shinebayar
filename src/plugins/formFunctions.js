// import jwt from 'vue-jwt-decode/src/decoder';function checkToken() {  const token = localStorage.getItem('token');  if (token !== null) {    return true;  }  return false;}function getEntry(t, states, entries) {  states.push({    name: t.switch.uniq,    code: t.code,    stg: t.stg,    data: t.switch.entry,  });  for (let i = 0; i < t.fields.length; i++) {    for (let j = 0; j < t.fields[i].fields.length; j++) {      if (t.fields[i].fields[j].fieldType === 'TableComponent') {        entries.push({          version: t.fields[i].uniq,          data: {            name: t.fields[i].fields[j].uniq,            data: t.fields[i].fields[j].tableDatas,          },        });      } else {        entries.push({          version: t.fields[i].uniq,          data: {            name: t.fields[i].fields[j].uniq,            data: t.fields[i].fields[j].entry,          },        });      }    }  }}function setState(data, type) {  this.$store.state.grp_id = data.grp_id;  this.$store.state.org_id = data.org_id;  this.$store.state.dep_id = data.dep_id;  this.$store.state.usr_id = data.usr_id;  this.$store.state.emp_id = data.emp_id;  this.$store.state.emp_name = data.emp_name;  this.$store.state.emp_img = data.emp_img;  this.$store.state.form_name = data.name;  this.$store.state.form_code = data.code;  this.$store.state.submit = data.submit;  this.$store.state.task_name = data.task_name;  this.$store.state.task_code = data.task_code;  this.$store.state.task_employee = data.task_employee;  if (type === 'update') {    this.$store.state.forms = data.form;  } else {    this.$store.state.forms = data.ver_form;  }}function setEntry(data, states, entries) {  states = JSON.parse(data.state);  entries = JSON.parse(data.data);  const nonEmptyElements = this.forms.filter((obj) => {    return obj;  });  nonEmptyElements.map((t) => setentry(t, states, entries));}function setentry(t, states, entries) {  for (let i = 0; i < states.length; i++) {    if (t.switch.uniq === states[i].name) {      t.switch.entry = states[i].data;    }  }  for (let i = 0; i < entries.length; i++) {    for (let j = 0; j < t.fields.length; j++) {      if (t.fields[j].uniq === entries[i].name) {        if (t.fields[j].fieldType === 'TableComponent') {          const data = entries[i].data;          t.fields[j].tableColumns = data.tableColumns;          t.fields[j].tableDatas = data.tableDatas;        } else {          t.fields[j].entry = entries[i].data;        }      }    }  }}function getUniq() {  return '_' + Math.random().toString(36).substr(2, 9);}// eslint-disable-next-linefunction setStage(stages, forms) {  this.$store.state.form_name = stages.name;  this.$store.state.form_code = stages.code;  for (let i = 0; i < stages.stages.length; i++) {    const stage = stages.stages[i];    const formObj = {      stg: stage.id,      code: stage.code,      title: stage.name,      fields: [],      switch: {        fieldType: 'ElSwitch',        label: 'Төлөв',        group: 'form',        isUnique: false,        span: 8,        labelWidth: 100,        activeText: '',        inActiveText: '',        disabled: false,        entry: false,        uniq: getUniq(),      },    };    this.$store.state.forms.push(formObj);  }}function setDisable(t) {  t.switch.disabled = true;  for (let i = 0; i < t.fields.length; i++) {    t.fields[i].disabled = true;  }}async function sendComment(comments, text) {  if (text === '') {    this.$message.warning('Та сэтгэгдэл оруулна уу!');    return false;  }  if (checkToken()) {    const body = {      form_id: this.$route.query.id,      created_user: this.$route.query.usr,      group: this.$route.query.grp,      organization: this.$route.query.org,      employee: this.$store.state.emp_id,      task: this.$route.query.tsk,      task_stage_group: this.$route.query.tsg,      text: this.comment_text,    };    await fetch(this.$store.state.form_comment, {      method: 'POST',      headers: {        Accept: 'application/json',        'Content-Type': 'application/json',        Authorization: this.token,      },      body: JSON.stringify(body),    })      .then((response) => {        if (response.status === 200) {          text = '';          body.emp_name = this.$store.state.emp_name;          body.emp_img = this.$store.state.emp_img;          body.created_date = new Date() + 8 * 60 * 60 * 1000;          comments.unshift(body);        } else {          this.$message.error('Илгээх үед алдаа гарлаа!');        }        this.$message.success('Амжилттай илгээгдлээ!');      })      .catch((error) => {        console.error('Error : ', error);        this.$message.error('Илгээх үед алдаа гарлаа!');      });  } else {    this.$message.error('Та системээс гарсан байна!');  }}function print() {  document.getElementById('printMe').style.zoom = '50%';  window.print();  window.onfocus = function () {    document.getElementById('printMe').style.zoom = '100%';  };}function addSection() {  const formObj = {    stg: 0,    code: '',    title: '',    fields: [],    switch: {      fieldType: 'ElSwitch',      label: 'Төлөв',      group: 'form',      isUnique: false,      span: 8,      labelWidth: 100,      activeText: '',      inActiveText: '',      disabled: false,      entry: false,      uniq: getUniq(),    },  };  this.$store.state.forms    .push(formObj)    .then(() => console.log(this.$store.state.forms));}function deleteSection(formIndex, formTitle) {  this.$confirm(    `Та ${formTitle} бүлгийг устгахдаа итгэлтэй байна уу?`,    'Анхааруулга',    {      confirmButtonText: 'Тийм',      cancelButtonText: 'Цуцлах',      type: 'warning',    }  ).then(() => {    this.$delete(this.$store.state.forms, formIndex);  });}function addTab(fields) {  const uuniq = getUniq();  fields.activeTab = uuniq;  fields.fields.push({    uniq: uuniq,    del_able: true,    title: 'Хувилбар ' + (fields.fields.length + 1),    fields: JSON.parse(JSON.stringify(fields.fields[0].fields)),  });}function removeTab(eachFormObj, targetName) {  if (eachFormObj.fields.length > 1) {    for (let i = 0; i < eachFormObj.fields.length; i++) {      if (eachFormObj.fields[i].uniq === targetName) {        eachFormObj.fields.splice(i, 1);        eachFormObj.activeTab = eachFormObj.fields[i - 1].uniq;      }    }  } else {    this.$message.warning('Устгах боломжгүй байна!');  }}export default {  checkToken,  getEntry,  setState,  setStage,  setEntry,  getUniq,  setDisable,  sendComment,  print,  addSection,  deleteSection,  addTab,  removeTab,};